FROM ubuntu:18.10
# FROM arm=armhf/ubuntu:16.04 arm64=arm64v8/ubuntu:18.10

ARG DAPPER_HOST_ARCH=amd64
ARG http_proxy
ARG https_proxy
ENV HOST_ARCH=${DAPPER_HOST_ARCH} ARCH=${DAPPER_HOST_ARCH}

# Setup environment
ENV PATH /go/bin:$PATH
ENV DAPPER_DOCKER_SOCKET true
ENV DAPPER_ENV TAG REPO
ENV DAPPER_OUTPUT bin
ENV DAPPER_RUN_ARGS --privileged --tmpfs /go/src/github.com/longhorn/longhorn-engine/integration/.venv:exec --tmpfs /go/src/github.com/longhorn/longhorn-engine/integration/.tox:exec -v /dev:/host/dev -v /proc:/host/proc
ENV DAPPER_SOURCE /go/src/github.com/longhorn/longhorn-engine
WORKDIR ${DAPPER_SOURCE}

# Install packages
RUN apt-get update && \
    apt-get install -y autoconf libtool cmake wget curl git less file \
        libglib2.0-dev libkmod-dev libnl-genl-3-dev linux-libc-dev pkg-config psmisc python-tox qemu-utils fuse python-dev \
        devscripts debhelper bash-completion librdmacm-dev libibverbs-dev xsltproc docbook-xsl \
        libconfig-general-perl libaio-dev libc6-dev sg3-utils iptables libltdl7 python-pip uuid-runtime libdevmapper-dev iproute2

# needed for ${!var} substitution
RUN rm -f /bin/sh && ln -s /bin/bash /bin/sh

# Install Go & tools
ENV GOLANG_ARCH_amd64=amd64 GOLANG_ARCH_arm=armv6l GOLANG_ARCH_arm64=arm64 GOLANG_ARCH=GOLANG_ARCH_${ARCH} \
    GOPATH=/go PATH=/go/bin:/usr/local/go/bin:${PATH} SHELL=/bin/bash
RUN wget -O - https://storage.googleapis.com/golang/go1.13.3.linux-${!GOLANG_ARCH}.tar.gz | tar -xzf - -C /usr/local && \
    go get github.com/rancher/trash && go get -u golang.org/x/lint/golint

# Docker
ENV DOCKER_URL_amd64=https://get.docker.com/builds/Linux/x86_64/docker-1.10.3 \
    DOCKER_URL_arm=https://github.com/rancher/docker/releases/download/v1.10.3-ros1/docker-1.10.3_arm \
    DOCKER_URL_arm64=https://github.com/rancher/docker/releases/download/v1.10.3-ros1/docker-1.10.3_arm64 \
    DOCKER_URL=DOCKER_URL_${ARCH}

RUN wget -O - ${!DOCKER_URL} > /usr/bin/docker && chmod +x /usr/bin/docker

# Minio
ENV MINIO_URL_amd64=https://dl.minio.io/server/minio/release/linux-amd64/archive/minio.RELEASE.2018-05-25T19-49-13Z \
    MINIO_URL_arm=https://dl.minio.io/server/minio/release/linux-arm/archive/minio.RELEASE.2017-07-24T18-27-35Z \
    MINIO_URL_arm64=https://dl.minio.io/server/minio/release/linux-arm64/archive/minio.RELEASE.2017-07-24T18-27-35Z \
    MINIO_URL=MINIO_URL_${ARCH}

RUN wget -O /usr/bin/minio ${!MINIO_URL} && chmod +x /usr/bin/minio

# Install libqcow
RUN wget -O - https://s3-us-west-1.amazonaws.com/rancher-longhorn/libqcow-alpha-20181117.tar.gz | tar xvzf - -C /usr/src
RUN cd /usr/src/libqcow-20181117 && \
    ./configure
RUN cd /usr/src/libqcow-20181117 && \
    make -j$(nproc) && \
    make install

# GRPC dependencies
# GRPC health probe
ENV GRPC_HEALTH_amd64=https://github.com/grpc-ecosystem/grpc-health-probe/releases/download/v0.3.1/grpc_health_probe-linux-amd64 \
    GRPC_HEALTH_arm=https://github.com/grpc-ecosystem/grpc-health-probe/releases/download/v0.3.1/grpc_health_probe-linux-arm \
    GRPC_HEALTH_arm64=https://github.com/grpc-ecosystem/grpc-health-probe/releases/download/v0.3.1/grpc_health_probe-linux-arm64 \
    GRPC_HEALTH=GRPC_HEALTH_${ARCH}

RUN wget -O /usr/local/bin/grpc_health_probe ${!GRPC_HEALTH} && \
    chmod +x /usr/local/bin/grpc_health_probe

# protoc
RUN wget -O - https://github.com/protocolbuffers/protobuf/archive/v3.11.2.tar.gz | tar xvzf - -C /usr/src
RUN cd /usr/src/protobuf-3.11.2 && \
    ./autogen.sh && \
    ./configure --prefix=/usr
RUN cd /usr/src/protobuf-3.11.2 && \
    make -j$(nproc) && \
    make install 

# protoc-gen-go
RUN cd /go/src/github.com/ && \
    mkdir golang/ && \
    cd golang && \
    git clone https://github.com/golang/protobuf.git && \
    cd protobuf && \
    git checkout v1.3.2 && \
    cd protoc-gen-go && \
    go build && \
    cp protoc-gen-go /usr/local/bin

# python grpc-tools
RUN pip install grpcio==1.22.0 grpcio_tools==1.22.0

# Build liblonghorn
RUN cd /usr/src && \
    git clone https://github.com/rancher/liblonghorn.git && \
    cd liblonghorn && \
    git checkout 6592b9967d1b5acbb51a5596abfe0a0d7bad16dc && \
    make deb && \
    dpkg -i ./pkg/liblonghorn_*.deb

# Build TGT
RUN cd /usr/src && \
    git clone https://github.com/rancher/tgt.git && \
    cd tgt && \
    git checkout e042fdd3616ca90619637b5826695a3de9b5dd8e && \
    ./scripts/build-pkg.sh deb && \
    dpkg -i ./pkg/tgt_*.deb

# Build cache for tox
RUN mkdir integration/
COPY integration/setup.py integration/tox.ini integration/requirements.txt integration/flake8-requirements.txt integration/
RUN cd integration && tox --notest

VOLUME /tmp
ENV TMPDIR /tmp
ENTRYPOINT ["./scripts/entry"]
CMD ["ci"]
